{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.093432Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.094104Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.108237Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.094076Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.107282Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.109976Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.110257Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.115869Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.110234Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.115271Z\"}}\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nimport seaborn as sns\nfrom sklearn. linear_model import Lasso\n\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.116749Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.117099Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.139462Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.117077Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.138706Z\"}}\nimport pandas as pd\ndata=pd.read_csv('../input/tomatodataset/ModifiedDatasetTomato.csv')\ndata\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.140677Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.141333Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.158608Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.141302Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.157824Z\"}}\n#encoding season column\ndata.replace({'Season':{'winter':1,'summer':2,'monsoon':3}},inplace=True)\ndata.replace({'Month':{ \n        'march': 3,\n        'april': 4,\n        'may': 5,\n        'june': 6,\n        'july': 7,\n        'august': 8}},inplace=True)\n              \ndata\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.160496Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.160719Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.173462Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.160697Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.172658Z\"}}\n#splitting dataset into X and y\ny = data['avg price']\nX = data.drop(['avg price','prod_name', 'order', 'prod_id', 'pack sold'], axis=1)\n#for demand\nz = data['order']\nw = data.drop(['order', 'pack sold' , 'prod_id', 'prod_name'], axis =1)\nw\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.174560Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.174792Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.182680Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.174763Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.181894Z\"}}\n#splitting into testing and trainning\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,shuffle=False,random_state=1)\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,shuffle=False,random_state=1)\nw_train,w_test,z_train,z_test=train_test_split(w,z,train_size=0.7,shuffle=False,random_state=1)\nw_train,w_test,z_train,z_test=train_test_split(w,z,train_size=0.7,shuffle=False,random_state=1)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.184021Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.184655Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.934503Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.184631Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.933436Z\"}}\nmodels = {\n    \"                     Linear Regression\": LinearRegression(),\n    \" Linear Regression (L2 Regularization)\": Ridge(),\n    \" Linear Regression (L1 Regularization)\": Lasso(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVR(),\n    \"   Support Vector Machine (RBF Kernel)\": SVR(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor(),\n    \"                               XGBoost\": XGBRegressor(),\n    \"                              LightGBM\": LGBMRegressor(),\n    \"                              CatBoost\": CatBoostRegressor(verbose=0)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")\n\nfor name, model in models.items():\n    print(name + \" R^2 Score: {:.5f}\".format(model.score(X_test, y_test)))\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.937595Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.938030Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.949786Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.938005Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.948813Z\"}}\n#model selection linear regression\nprice_reg_model= CatBoostRegressor(verbose=0)\nprice_reg_model.fit(X_train,y_train)\n\norder_reg_model = CatBoostRegressor(verbose=0)\norder_reg_model.fit(w_train,z_train)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.953075Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.953893Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.964306Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.953858Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.963391Z\"}}\n#Training data prediction\nprice_data_pred= price_reg_model.predict(X_train)\nprice_data_pred\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.965939Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.966275Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.977028Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.966244Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.976014Z\"}}\norder_data_pred= order_reg_model.predict(w_train)\norder_data_pred\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.978599Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.978933Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.985637Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.978902Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.984736Z\"}}\nfrom sklearn import metrics\nerror_score_price = metrics.r2_score(y_train,price_data_pred )\nprint (error_score_price)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.987134Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.987875Z\",\"iopub.status.idle\":\"2022-08-23T00:47:32.996262Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.987842Z\",\"shell.execute_reply\":\"2022-08-23T00:47:32.995547Z\"}}\nerror_score_order = metrics.r2_score(z_train,order_data_pred )\nprint (error_score_order)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:32.997109Z\",\"iopub.execute_input\":\"2022-08-23T00:47:32.997432Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.006858Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:32.997406Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.006093Z\"}}\nfrom sklearn.metrics import mean_squared_error\nprint(mean_squared_error(y_train, price_data_pred))\nprint(mean_squared_error(z_train, order_data_pred))\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.007562Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.007813Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.165736Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.007789Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.164897Z\"}}\n\n#visualize the actual prices and Predicted prices\nfrom matplotlib import pyplot as plt\n#plt.scatter(X_train,y_train, color = 'blue', label = 'Actual')\nplt.scatter(y_train,price_data_pred)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\"Actual Price Vs Predicted Price\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.166780Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.168071Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.320020Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.168038Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.319040Z\"}}\nplt.scatter(z_train,order_data_pred)\nplt.xlabel(\"Actual Demand\")\nplt.ylabel(\"Predicted Demand\")\nplt.title(\"Actual Demand Vs Predicted Demand\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.321278Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.321636Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.330730Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.321604Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.329734Z\"}}\n#Training data prediction\nprice_testing_data_pred= price_reg_model.predict(X_test)\nprice_testing_data_pred\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.331867Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.332512Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.341948Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.332480Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.341158Z\"}}\norder_testing_data_pred= order_reg_model.predict(w_test)\norder_testing_data_pred\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.345033Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.345886Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.353838Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.345854Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.352915Z\"}}\nfrom sklearn import metrics\nerror_score_price_test = metrics.r2_score(y_test,price_testing_data_pred )\nprint (error_score_price_test)\nerror_score_order_test = metrics.r2_score(z_test,order_testing_data_pred )\nprint (error_score_order_test)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.354794Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.355025Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.365181Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.355003Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.364389Z\"}}\nfrom sklearn.metrics import mean_squared_error\nprint(mean_squared_error(y_test, price_testing_data_pred))\nprint(mean_squared_error(z_test, order_testing_data_pred))\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.366237Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.366495Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.516179Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.366471Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.515149Z\"}}\n#visualize the actual prices and Predicted prices\nfrom matplotlib import pyplot as plt\n#plt.scatter(X_train,y_train, color = 'blue', label = 'Actual')\nplt.scatter(y_test,price_testing_data_pred)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\"Actual Price Vs Predicted Price\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2022-08-23T00:47:33.517399Z\",\"iopub.execute_input\":\"2022-08-23T00:47:33.518181Z\",\"iopub.status.idle\":\"2022-08-23T00:47:33.679255Z\",\"shell.execute_reply.started\":\"2022-08-23T00:47:33.518155Z\",\"shell.execute_reply\":\"2022-08-23T00:47:33.678326Z\"}}\nplt.scatter(z_test,order_testing_data_pred)\nplt.xlabel(\"Actual Demand\")\nplt.ylabel(\"Predicted Demand\")\nplt.title(\"Actual Demand Vs Predicted Demand\")\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"_uuid":"36a3914e-f32f-479d-9760-f6187e5a6cf8","_cell_guid":"ddbbc4ea-5a50-4af6-8996-bd4e661ca49f","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}